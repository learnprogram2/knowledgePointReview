
项目三次优化:
	1. 缓存优化
	2. 接口参数优化
	3. https://upload-images.jianshu.io/upload_images/1616121-d68d86d4f33be637.png

画一下你这个项目与哪些工程交互，它在你们的产品中处于什么样一个位置:


项目架构图(比较难的业务场景):


你们这个项目中都遇到了哪些问题呢？说说你们最后都怎么解决的



服务的拆分:
	为什么要进行系统拆分:
		1. 不拆分多人维护代码, 发版上线很麻烦, 可用性降低.
		2. 拆分多个微服务, 维护开发方便, 提升开发效率. 也提升了系统复杂度
	如何进行系统拆分:
		1. 多轮拆分, 先按照模块拆分: 用户权益系统/定时任务返利模块/领券中心...
		2. 系统内部拆分, 领券中心拆成同步接口&异步消息处理模块...
	拆分后不用dubbo可以吗:
		可以, 把超时重试, 负载均衡...做好.
DBG
项目业务拆分:





日常项目中，如果你接手，你准备从哪些方面调优？
	1. 目标: 项目性能遭遇瓶颈或者猜测即将遭遇
	2. 快速增强: 扩容
	3. 调优: 系统调优和代码调优. 比如我们所提到的CDN、ehcache、redis等缓存技术，消息队列等等，加快服务间的响应速度，增加系统吞吐量，避免并发，至于代码调优，这些就需要多积累了，比如重构、工厂等， 数据库调优的话这个我不是很懂，只知道索引和存储过程，具体参考：Mysql数据库调优21个最佳实践  ，其他数据库调优方面就各位自己找找吧

对分布式的理解:分布式就是把一个系统/业务 拆分成多个子系统/子业务 去协同处理，这个过程就叫分布式
http://blog.csdn.net/binyao02123202/article/details/32340283/

描述一下当前的项目:

项目拆分:

项目架构:

系统设计:
	设计一个安全的对外接口:
		1.数据加密:
			https协议数据加密
                2.数据加签:
                        数据加签
                3.时间戳机制:
                        时间戳机制, 防止拿到数据包进行恶意请求.
                4.AppId机制:
                        AppId机制, 调用者在后台开通appid, 提供给用户相关的密钥;
                        在调用的接口中需要提供appid+密钥, 服务器端会进行相关的验证;
                5.限流机制:
                        令牌桶和漏桶算法对指定appID的调用者限流
                6.黑名单机制:
                7.数据合法性校验:
                        数据合法性校验







系统设计题目:
	1. 实现前5分钟,1小时,24小时内分享最多
		1. LinkedList: 记录1,2,...n次的node, 每个node是一个list装载item
		2. HashMap: key:item, value:次数, 可以直接去linkedList找.

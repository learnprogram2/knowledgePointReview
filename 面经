1/20:
1. https://www.jianshu.com/p/b9dea1ca51df
2.




自我介绍:
	你好, 我叫王一鸣, 现在在翼支付的红包部门做后台开发. java开发.
	我们部门的主要业务是app里面拉新和促活的一些活动, 像是任务中心, 优惠券中心, 还有 支付成功后的分享红包之类的活动,
            	然后还有就是支撑省公司的用户手机卡套餐活动.

	我大学专业是GIS, 主要使用.NET做arcEngine的二次开发做空间数据的可视化.
	进入公司后从开始的学习Java基础开发然后开始接触开发框架做部门的业务,
	然后在遇到各种技术(MySQL/MQ/redis)的时候自己私下学习技术的时候和原理.
	在开发中遇到的各种问题也尝试着去解决.



为什么离开上家公司:
	1. 现在的公司也挺好的, 技术氛围不强.
	2. 技术上的学习, 和深度的扩展, 想找更大更好的发展平台.





4. dubbo容错机制
	dubbo容错在哪一层做的 cluster

5. redis跳表, 跳表应用在那个数据Obj里

6. Java怎样保证线程安全

7. 说一个自己参与的最XX的项目

1. 如果大文件入库, 怎么办
	中断怎么解决

1. 领券接口, 从哪些方面考虑.




hashmap, jvm, mysql隔离界别, 索引优化... 这些还好. 有CPA理论(三个我没记住) DNS(我不了解).302和301区别(没了解) 还问了很多问题想不起来了.


next-key-lock 怎么锁定的?
	RR隔离级别: Next-Key Lock的算法，锁定的不是单个值，而是一个范围（GAP）, 左开右闭区间, 为了防止幻读.

CAP理论:
	1. 分布式系统的三个指标
		一致性(consistency), 可用性(availability), 分区容错(partitionTolerance)
	2. 分区容错:
		区间的通信可能会失败, 无法避免. P总是成立.
	3. 一致性:
		写后的读必须是一样的
	4. 可用性:
		系统收到请求后给出响应的时间间隔.
	5. 一致性与可用性矛盾:
		我们的系统要在一致性和可用性做取舍, 一致性高可用性差, 可用性高一致性差.

Base理论: 是对CAP中一致性和可用性权衡的结果, 牺牲强一致性来获得可用性.
	1. 使用业务的最终一致性(eventualConsistency)替换CAP中的C强一致性
	2. 三个指标
		基本可用(Basically Available), 软状态(soft state), 最终一致性(EventuallyConsistency)
	3. ACID 是传统数据库常用的设计理念, 追求强一致性模型.
		BASE 支持的是大型分布式系统, 提出通过牺牲强一致性获得高可用性.




Http响应码:
	1. 1XX: 信息: 100服务器尽皆受到部分请求, 客户端可以继续发送
		101服务器将转换协议
	2. 2xx: 成功:
		200请求成功
		201请求创建, 202请求被接受还没处理完..
	3. 3xx: 重定向
		301永久重定向, 302页面临时迁移到新url
		304页面未修改, 可以使用缓存.
	4. 4xx: 客户端错误
		400服务器未理解请求, 401需要登陆, 402代码无法使用
		403权限不足, 404未找到, 405请求方法不允许,
	5. 5xx: 服务器错误
		500未知错误, 502badGateway, 504 网关超时
http2:
	1. 二进制, 双向流通流.
	2. 多路复用

DNS(domainNameService): 域名解析
	1. 流程: 拿到域名检查浏览器缓存/host文件/dns服务器
		拿到服务器IP, 访问.


CDN(contentDeliveryNetwork): 内容分发网络
	依靠部署在各地的边缘服务器，通过中心平台的负载均衡






项目坑点介绍, 和抢购接口的设计(只回了限流).
抢购接口:
	1. 限流
		客户端-验证码减少请求
		服务器-拦截器限流(ip访问限制)
		cas抢库存
	2. 数据库层
		使用缓存, 把抢购名单缓存
			要考虑缓存击穿雪崩和一致性.
		分布式数据架构.
	3. 异步消峰
	4. 库存:
		不要加锁, CAS




分布式锁？SNX
	使用setnx加锁，并使用expire命令为锁添加一个超时时间, 超过该时间则自动释放锁，
	如果超时时间没有设置, 可下次拿锁的时候校验value(时间), 超时就删掉

聊一下 “分库分表”
	垂直拆分: 数据分裂多个表
	水平拆分: hash分/range分
	扩容: 一致性hash算法, 减少扩容后的调整


java类的初始化顺序
	静态字段, 静态代码块, 普通字段, 普通代码块, 构造器, 普通方法


concurrentHashMap原理, 分段锁的实现机制

kafka削峰的弊端
Kafka消费顺序
	1. producer: 引入ProducerID和sequenceNumber,
		对每个producer(PID)发送的<topic, partition>都有单调递增的sequenceNumber
		broker也会为<PID, topic, partition>维护序号, 递增接收
	2. partition: 自然顺序
	3. consumer: 可能会多线程处理丧失顺序性, 可以使用内存队列保持顺序
kafka partition 的调整的影响
	ConsumerRebalance
3. partition增加后怎么调整


Dubbo 基本原理 （RPC 框架）
	dubbo启动过程


TCP/IP 是如何实现可靠传输的 （了解不够全面   数据分包、编号）
	1. 三次握手四次挥手
	2. 数据分包编号, ack
	3. 拥塞控制, 流量控制, 动态窗口


SMRA2020030313424326216675145025
SMRA2020030313431150330330627598
SMRA2020030313435906948815917368
SMRA2020030313502550767734486049
SMRA2020030314385559183705359438
SMRA2020030315352726274906511884
SMRA2020030315355840273206836829
SMRA2020030316062291091422450269




	requestNo=SMRA2020030315355840273206836829
        requestNo=SMRA2020030315352726274906511884
        requestNo=SMRA2020030314385559183705359438
        requestNo=SMRA2020030310435810072016238486
        requestNo=SMRA2020030310420797271290022925
        requestNo=SMRA2020030310560006838770454858
        requestNo=SMRA2020030313424326216675145025
        requestNo=SMRA2020030313431150330330627598
        requestNo=SMRA2020030313435906948815917368
        requestNo=SMRA2020030313502550767734486049
        requestNo=SMRA2020030313570154636396451791
        requestNo=SMRA2020030314035645826138493955
        requestNo=SMRA2020030314063264178559462720
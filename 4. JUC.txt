JUC:
	java并发中的三个特性 原子性、可见性、有序性:

	计数器:
		Striped64:并发计数组件: https://www.jianshu.com/p/30d328e9353b
			父类: base计数+cells计数先驱
		LongAdder
                DoubleAdder
                LongAccumulator
                DoubleAccumulator

	原子类:
		操作的数据类型可分为四类:
			基本类型:
			引用类型:
			数组类型:
			对象属性修改类型:
		AtomicInteger原理:
			incrementAndGet:
				1. 直接get当前的值(volatile的)
				2. CAS + 自旋
			get:    直接拿到value[volatile], 有可见性
			AtomicInteger, 为什么要用CAS而不是synchronized:
                        	乐观锁代替悲观锁, 适合读多写少的情况.
		AtomicLongArray原理:
			incrementAndGet:
			       1. 调用addAndGet(i,1)方法
			       2. 首先检查i索引范围
			       3. CAS + 自旋
			getRaw:
			       1. 调用Unsafe.getLongVolatile(array,offset);
		AtomicReference原理:
			1. set都是由volatile和Unsafe提供的CAS函数实现的原子操作
			2. get都是直接get.
		AtomicLongFieldUpdater原理:
			1. CAS操作
	锁:
		LockSupport: 挂起和唤醒线程的基础工具类, 通过操作UNSAFE
	        Lock: 锁的接口
	        AQS: http://www.cnblogs.com/waterystone/p/4920797.html
	                锁的底层支持, FIFO的双向队列, state可用记录锁次数所有线程cas该值拿锁, 等待线程存成Node
	        Condition:条件队列,用 signal和await做锁的传声筒, 相当于Synchronized的wait()notify(),
	        ReentrantLock:
	                独占锁,state表示重入次数, CAS拿Sync的锁(AQS的state), 公平/竞争. ConditionObject.
	        ReadLock/WriteLock/ReadWriteLock:
	                维系读&写两个锁, 公用Sync(AQS), 分别拿独占锁共享锁.
	                读: ??
	                写: ??
	        StampedLock: 三种模式:悲观读&乐观读&写锁(不可重入), 不支持Condition

	并发集合:
	        CopyOnWriteArrayList:
	                包装一个volatile的array, 使用一个ReentrantLock 进行添加移除.查询没有加锁增删每次重新设置array, 保证线程可见
	        CopyOnWriteArraySet: 就是CopyOnWriteArrayList.

	        ConcurrentMap: 并发Map接口
	        ConcurrentNavigableMap: 排序map
	        ConcurrentSkipListMap: 基于跳跃表实现的Map
	        ConcurrentSkipListSet: 就是SkipListMap
	        ConcurrentHashMap: 哈希表实现的Map, CAS+volatile
			get:
				1. 计算key的hash, 定位索引, 如果是首届点直接返回.
				2. 如果遇到扩容, 就调用标志正在扩容节点ForwardingNode的find方法, 重定向一下查找该节点, 匹配就返回
				3. 都不符合的话，就往下遍历节点，匹配就返回
			put:
				1. 校验key-value, 都不能为空
				2. 插入操作, 空表就初始化
				3. 要插入的index为空就cas插入
				4. 如果正在扩容中, 就helpTransfer()
				5. 如果是链表, 就遍历修改, 没有就放在最后. [synchronized块锁node进行]
				6. 如果是树也修改和插入 [synchronized块锁node进行]
				7. 插入后判断要不要转红黑树.
				8. 修改后判断要不要resize重哈希.
			扩容:
				1. sizeCtl属性多线程之间查询, 判断ConcurrentHashMap的状态
					sizeCtl < 0 : 表示有其他线程正在执行扩容
				2. transferIndex扩容索引，表示已经分配给扩容线程的table数组索引位置
					扩容线程，在迁移数据之前，首先要将transferIndex右移
				3. 迁移完毕的hash桶,会被设置成ForwardingNode节点，以此告知访问此桶的其他线程，此节点已经迁移完毕。
					put或remove访问到ForwardingNode节点, 先帮其扩容, 分配transferIndex.
					get访问到调用ForwardingNode的find方法，去nextTable里面查找相关元素
			与HashMap对比各自优势:

	        Queue - Deque: 队列和双向队列
	        ConcurrentLinkedQueue: 单向链表,volatile的head/tail/node, CAS编辑, tail不代表最后一个为了少更新
	        ConcurrentLinkedDeque: 双向链表, Node里面有prev&next. 也是Queue.

	        BlockingQueue: 阻塞队列
	        BlockingDeque: 阻塞双向队列
	        ArrayBlockingQueue:有界阻塞队列, 全局一个lock控制入队出队, items是final的
	        LinkedBlockingQueue:单向无界阻塞队列, 两个ReentrantLock控制出入队,notEmpty 和 notFull 两个条件变量(可手动唤醒(notFull)/沉睡(putlock)存放), 存放阻塞线程, capacity是容量(默认最大),
	        LinkedBlockingDeque:双向无界阻塞队列, 一个reentranLock控制, 两个条件变量同queue.
	        PriorityBlockingQueue:带优先级的无界阻塞队列, 每次出队优先级最高的元素, 使用平衡二叉树堆实现. 一个lock控制出入队, notEmpty条件变量,

	        Delayed: 延迟对象, 混合风格的接口, 用来标记那些应该在给定延迟时间之后执行的对象
	        DelayedQueue: 延迟时间作为优先级的队列, 是一个PirorityQueue, 元素实现delayed接口. 一个ReentrantLock控制出入队,

	        TransferQueue: 可以直接给消费者, 而不放在队列里. 查看等待的消费者个数. 生产者可以马上知道是否被消费的队列
	        LinkedTransferQueue: List的

	        SynchronousQueue:同步队列没有容量，是无缓冲等待队列，是一个不存储元素的阻塞队列，会直接将任务交给消费者，
	                必须等队列中的添加元素被消费后才能继续添加新的元素。
	                不存储元素的阻塞队列，会直接将任务交给消费者，必须等队列中的添加元素被消费后才能继续添加新的元素


	线程同步器:
		CountDownLatch: 维系了一个sync同步器, 设置state=初始值, await()之后本线程就去拿公平锁, 其他线程每次countdown, 就减一, 减到0, 本线程就拿到锁往下走了.
	        CyclicBarrier:回环屏蔽, 用的时ReentrantLock, 等待并且减count, 如果count到0就重制, 唤起大家.
	        Semaphore: 信号量, 也是用的sync同步器, 每次线程release都把state+1, 主线程aquire(xx)就如对比有无达到xx.
	                park()/unpark()
	        Exchanger: 两个工作线程之间交换数据的封装工具类

	线程池:
		Executors: 生成线程池的工具类
                Executor：解耦任务本身和任务的执行: 接收任务, 内容是执行逻辑. 生命周期的管理、异步任务的支持
                ExecutorService：在Executor基础上增强任务控制
                ScheduledExecutorService: 在ExecutorService基础上加了定时执行任务
                ThreadFactory: 线程工厂, 设置线程的线程组, 名称等...

                AbstractExecutorService
                ExecutorService的抽象实现，为各类执行器类的实现提供基础。
                ThreadPoolExecutor
                线程池Executor，也是最常用的Executor，可以以线程池的方式管理线程。
                ScheduledThreadPoolExecutor
                在ThreadPoolExecutor基础上，增加了对周期任务调度的支持。
                ForkJoinPool
                Fork/Join线程池，在JDK1.7时引入，时实现Fork/Join框架的核心类。

                Future: 提供得到异步结果方法的接口.
                RunnableFuture: 实现Future和runnable的接口, 也就是可以执行, 并且可以得到结果
                FutureTask: RunnableFuture的实现类. 可以接收callable,从而变成了runnable.

                Callable: 可以拿到结果的runnable.
                ScheduleFuture: 实现delay和future的接口. 就是延迟+异步结果
                RunnableScheduleFuture: 继承RunnableFuture和ScheduleFuture, 增加是否周期执行的方法

                RecursiveAction: 递归的, 继承ForkJoinTask, void
                RecursiveTask: 递归的, 继承ForkJoinTask, 有返回值.

	工具类:
		ThreadLocalRandom:random的子类, random+threadLocal结合



	并发编程知识: https://segmentfault.com/blog/ressmix_multithread

	Callable与Runnable: https://blog.csdn.net/alex_hh/article/details/90481667
		Runnable是一种有很大局限性的抽象, run方法不能返回结果或抛出受检查编译.
		Callable是一种更好的抽象：它认为主入口点(即call())将返回一个值，并可能抛出一个异常。
			与Future/FutureTask放在线程池中使用获取异步结果.

	线程
		线程状态: https://blog.csdn.net/weixin_33708432/article/details/92139324 精
			1.new: 新建状态, 线程还未开始.
			2.runnable: 可运行状态, 正在运行/等待系统资源.
				ready: start()方法/join结束/拿到对象锁/yield()等时候进入就绪状态, 只是有资格运行, 需要调度程序挑选到
				running: 线程调度程序从可运行池中选择一个线程运行。这也是线程进入运行状态的唯一一种方式
			3.blocked: 阻塞状态, 等待监视器锁(synchronized), 在object.wait然后notify()之后也会进入. synchronized的同步队列
			4.waiting: 等待状态, 在object.wait之后进入, thread.join()无超时的方法进入, lockSupport.park无超时方法进入. lock的等待队列.
			5.timed_waiting: 超时等待. thread.sleep(), Object.wait(timeout), thread.join(timeout), lockSupport.parkNanos(nanos), locksupport.parkUntil(deadline).  等待队列
			6.terminated: 终止状态.
		状态切换:
			Thread.sleep(): timed_waiting, 阻塞当前线程的执行, 不释放锁资源, 自己醒过来
			Object.wait(): waiting, synchronized块中执行, 释放占有的锁
			Condition.await(): waiting, 底层是调用LockSupport.park()
			LockSupport.park(): waiting, 阻塞当前线程的执行, 不释放锁资源, 调用的Unsafe
		线程创建:
			1. 继承thread,重写run
			2. 实现runnable, 实现run
			3. 匿名内部类, thread,runnable.
			4. 实现callable
			5. 线程池
			6. 并行流, list.parallelStream().
			7. Spring异步方法
	线程池:
		Java 提供了哪几种线程池?他们各自的使用场景是什么?:
			ThreadPoolExecutor: 普通线程池类.
				1. 普通任务: execute(Runnable): 工作线程小于核心线程就创建核心线程执行,
					达到核心数量, 就放入任务队列, 任务队列满了就创建非核心线程, 创建不了就拒绝策略.
				2. 未来任务: FutureTask有状态state控制运行,NEW->COMPLETING->NORMAL/EXCEPTIONAL.
					FutureTask保存了运行任务的线程runner, 调用者调用get后被保存在waiters队列中.
					任务执行完毕，修改状态state变化，唤醒调用者线程。
					把普通任务包装成FutureTask来实现, 使用了模板方法.
			ScheduledThreadPoolExecutor: 定时任务线程池类. 使用延迟队列(DelayedWorkQueue)
				(DelayQueue中使用的是优先级队列，而优先级队列使用的堆；DelayedWorkQueue直接使用的堆)
			ForkJoinPool: 7新增的, 工作窃取理论实现大任务拆小任务.
		线程池的创建方式?
			1. ThreadPoolExecutor手动创建: 
				7个参数: corePoolSize核心线程数, 
					maximumPoolSize最大线程数, 
					keepAliveTime线程空闲关闭的时间, unit时间单位, 
					workQueue阻塞的任务队列:
						ArrayBlockingQueue: 有界阻塞队列
	                                        LinkedBlockingQueue: 链表的无界阻塞队列
						PriorityBlockingQueue: 有优先级的无阻塞队列
						SynchronousQueue: 不存储元素的阻塞队列.
					threadFactory线程工厂.
					handler拒绝策略.
		拒绝策略有哪些:
			丢弃当前任务:
			丢弃最老任务:
			抛出异常: 默认
			调用者自己处理:
		shutdown和shutdownNow区别:
			shutdown: 接着做完剩下的工作, 正常结束
			shutdownNow: 停止所有工作不做了.
		线程池状态: 和线程数量共同保存在ctl里, 位运算.
			RUNNING: 可接受新任务, 可执行队列中的任务.
			SHUTDOWN: 不接受新任务, 可执行队列中的任务. 执行shutdown()方法
			STOP: 不接受新任务, 不执行队列中的任务, 正在中断执行中的任务. 执行shutdownNow()方法.
			TIDYING: 所有任务已经终止, 线程数量为0. 正在执行terminated()方法
			TERMINATED: 终止状态. terminated()执行完毕.
		自定义线程池:
			1. 定义核心线程数, 最大线程数. 为了控制线程数量.
			2. 任务队列, 最好是blockingQueue, 阻塞队列. 
			3. 指定拒绝策略
			如何支持带返回值的任务呢: 提交任务的时候不需要阻塞，get返回值的时候才可能需要阻塞
				线程池实现FutureExecutor接口, 接收callable的任务, 并提供get的方法(可能阻塞)
			任务执行的过程中抛出异常: 设置成一种状态返回给主线程.
		为什么要用线程池?:
		线程池的好处:
			1. 减少线程的创建开销
			2. 控制并发数
			3. 进行线程管理
		使用时注意什么?
			1. 核心线程数量, 等待队列的配置, 不要发生任务提交后长时间没有执行
		核心线程数和最大线程数设置成多少?https://mp.weixin.qq.com/s/tV48ZCwZUAUO-1xL7uESUA
			1. IO密集: 最佳线程数目=（（线程等待时间+线程 CPU 时间）/线程 CPU 时间 ）* CPU 数目。
			2. cpu密集: 尽量少, cpu数+1
		1000个多并发线程，10台机器，每台机器4核的，设计线程池大小。

	产生死锁的4个必要条件：
		互斥条件: 资源是独占的且排他使用
		请求与保持条件: 每次申请所需要的新资源, 任继续占用已分配到的资源
		不剥夺条件: 资源在未使用完毕之前不释放, tryLock破坏了不剥夺条件
		循环等待条件: 必然存在一个进程等待队列形成循环等待.

	自旋锁实现:






线程和进程的区别






积分商城-答题分享活动-二期活动形式优化-对外发分API
	- 通过为用户发放积分，并通过按积分分奖的方式给予用户激励
	- 体系概念, 活动迭代, 先是答题用, 后来对接外部绑卡等需求.
	- 库表设计.活动分表
	- 定时任务批量跑数据.
	- 项目高并发设计三次优化:
		1. 分阶段缓存优化
		2. 接口参数优化
		3. https://upload-images.jianshu.io/upload_images/1616121-d68d86d4f33be637.png
		4.
	分阶段缓存存取设计
		1. 对于并发量低&主要是修改请求的积分发放阶段, 使用MySQL数据库.
		2. 对于并发量高&主要是查询请求的奖励发放阶段, 使用Redis缓存&MySQL支撑做防穿透处理的缓存设计.
天降红包活动:
	- 提升客户端活跃和消费活跃, 登录客户端后主动向用户推送的代金券包
	- 结合大数据标签，千人千面推送天降红包.
	- 五分钟的发放失败重试机制.
分享红包活动
	- 支付后的引流、拉新活动. 红包翻倍等玩法.
	- 库表设计比较麻烦吧







红包专区-优化
优惠
惠生活APP模块活动

客户端用户权益模块开发:
1. 任务制-二期-标签逻辑修改-加锁防止多条-缓存优化
	- 为激励用户的使用习惯，完成任务的营销金额的月维度的消费返现活动
	- 用户人群标签, Kafka队列监听用户消费行为, 异步转同步的返利接口
	- 问题用户的协查-开发查询系统. 时间分表.
	对接标签用户和各省份用户名单, 自定义的任务完成体系
        	1. 任务使用状态模式, 使用dubbo对接其他部门的标签用户, 省份名单.
        	2. 使用Kafka对接其他部门, 使用mysql对接业务内的用户任务完成.
	分布式锁防止用户任务重复
		zk分布式锁
		redis锁: redis中基于cas的乐观锁, 自写Lua脚本
	Kafka消息遗漏:
		修改zk的offset, 重新消费
2. App内权益专区会员系统开发, 迭代需求开发.
   - VIP权益红包，是用户可在翼支付购买的一种包月会员服务,
	包括五部分：基础权益、支付权益、金融权益、商户权益及客服权益：
	支付通用红包, 翼支付线上消费红包, 视频月卡加油卡充值..., 客服权益
   - 定时任务批量处理订购返利, 对接省内用户卡, 返利明细计算
   - 定时任务跑大量数据, 服务器不够.

3. “惠生活”抢券系统开发.
	- 优惠活动聚合入口, 集和用户帐单,账户返利,其他活动, 领取券码 的入口.
	- 超发问题: 原始不控制, 加redis控制, 业务逻辑优化99.8%.
	- 并发接口性能: 使用缓存, 扩容, 限制dubbo-线程数,
	领券接口超发问题
		1. 根据业务, 一定比例的请求会有几率失败, 使用请求限制+库存限制;
			请求限制先达到, 返回"活动火爆".
				稍等后库存限制也达到, 已抢完
				如果Kafka返回释放部分请求, 可以接着抢.
				但如果请求限制满, 库存已满95%就"已抢完".
		2. 分段库存设计
		3. 使用队列串行化, 由一台机器操作.






短信代扣, 对外API
短信代扣-模板修改
对接欢购单点登录
唯品会API对接发券
	- 配合市场商务同事撬资源计划，新增外部券码接口对接模式，方便外部商户流量引入
短信代扣, 对外API
	- 对翼支付商户提供的使用短信验证码扣除账户金额进行支付的功能.
	- RSA非对称加密的API, 代扣流水的库表设计, Kafka队列监听代扣结果, 同步查询保证队列有效.
	- 模板定制优化
	扣款流程设计
        	1. 同步请求-发送Kafka消息, 为用户发送短信
        	2. 监听用户上行短信topic, 根据消息-发送Kafka消息扣款操作
        					回调省公司
        	3. 监听Kafka消息, 扣款中间-回调省公司, 并确认
        			最终扣款成功-回调省公司.
        流水对账工作
        	定时任务每月整理跑出账单数据, 异常数据的异常表-责任人记录.

对接欢购单点登录
	- 购物板块目前与其他平台的结合，需支持端外使用, 实现用户在端外登陆――授权，减少用户操作
	- ticket生成-校验





流量达量任务-优化
	- 针对达到流量使用的电信用户返利翼支付红包, 参与用户1000W+户
	- 用户在活动页开启任务, 次月任务自动触发双倍门槛任务.
	- 与省份同步用户流量使用情况, 分表记录用户参与情况, 接收部分省份的屏蔽需求.
	- 月初定时任务跑批返利.
	每月亿条流量数据处理入库
		1. 月初定时任务跑多省数据,
		2. 1000条并发跑.
	异常数据的处理, 防止自损.
VIP权益红包-补订购-秋促
	- 为用户定制VIP/校园套餐, 订购套餐, 管理系统开发.
	- 权益月初跑批发放, 库表设计, 季度/年度订购逻辑设计.
	- 难点: 数据批量处理. 遗漏数据补充, 数据订正. 分省限制规则.
	分省限制规则
		1. 使用适配器和代理模式指定每个省份的用户条件.
	异常问题的协查
		1. 用户事务操作联调查询的管理页面, 可以查询用户返利事务中的每一步操作.
	定时重试机制
		1. 非即时返利2小时后进行补返利操作, 重试3次进行记录预警.
		2. 即时返利5分钟重试.





项目分割-redis配置.
	随着红包项目的扩张, 开始对项目进行优化与分割
		1. 先把领券中心分出去
		2. 定时任务
		3. 批量数据
	由 redis 主从哨兵模式切换 redisCluster,
	Apollo 自动化配置整合,
	小组开发日志整理与总结等.
	sonar扫描代码



应用技术点:
职责描述:
问题-亮点:




问题: 知识点

异步消息超前问题处理
	1. 使用redis分布式锁
	2. 带状态更新
不停机数据迁移并采用动态数据源拆库
	1. 把用户流量数据和用户返利数据迁移到新库中,
		后台线程不停在跑, 前台查询以老库为准, 修改新增双写.
		然后迁移完毕后查新库, 并把老库操作停止.
	2. 使用AbstractRoutingDataSource数据源路由器, 实现InitializingBean在mapper的beanPropertySet后设置数据源



本地缓存解决redis热点数据
	1. redis热点数据, 只读, 可以+随机数备份读取/
	2. springSession, 存储热点数据
令牌桶限流+dubbo+线程池限制+项目拆分避免对其他线上业务影响
	1. guava令牌桶, 每台服务器每秒放出100个令牌
	2. dubbo线程池, 限制业务500个
	3. 拆分出抢购业务.







消息积压与未消费情况的处理
	移动consumer在zk的offset, 实现重复消费

内存泄漏 OOM 问题排查
	4. OOM事件:
                1. Quartz定时任务内存泄漏: The web application [/project] appears to have started a thread named [SchedulerFactoryBean-Worker-1] but has faild to stop it
                        原因: 系统在关闭时没有给Quartz时间来停止它所创建的定时任务，导致线程未被停止系统便已经关闭了。
                        解决: 配置QuartzContextListener实现ServletContextListener，并在ContextDestroyed时执行SchedulerFactoryBean的shutdown方法
                2. HTTP线程未关闭异常:
                        原因: httpAsyncClient客户端在请求失败的情况下，httpclient.close()此处会导致主线程阻塞，
                                经源码发现close方法内部，在线程连接池关闭以后,
                                httpAsyncClient对应线程还处于运行之中，一直阻塞在epollWait
                3. 创建超大数组:
                        原因: 定时任务项目跑数据, OOM
                        解决: JVM调整新生代大小-Xmx, 并增加编码规则.

随机算法


哪个项目让你收获最多，这个项目使用了哪些技术，挑战在哪里？
项目中最大的难点, 怎么解决, 学到了什么
	1. 使用redis双key做的库存管理:
		我们的领券中心项目中的抢券需求的开发
			我们的业务本来是随时可以抢的, 我们也只是作为营销中心的前端
		需要添加库存控制, 使用了redis缓存做的. 并添加了redis分布式锁.
		1. key1, 标记请求量.
		2. key2, 标记成功量, 如果成功量没满, 请求量满了就直接返回.
					如果未成功的请求失败了, 也不减少请求量了. 只对请求失败的补发.
	2. MQ消息对接需求开发:
		领取接口升级为异步接口通知的, 第一次使用了Kafka, 然后对接.
		发生了异步比同步快的情况.
	3. redis中的序列化.
		JdkSerializationRedisSerializer进行序列化时在key和value还有hashkey和hashvalue的原始字符前都加了一串字符.
		StringRedisSerializer
	4. 接手没有文档的项目，怎么梳理业务逻辑关系，代码关系？
		起起服务，从页面上跑一条业务，同时后台跟踪走过的代码，跟踪数据库，跟踪数据走向，跟踪页面。
		梳理整理业务逻辑，整理代码走向，整理数据走向，表间关系。









分布式: 
	为什么要进行系统拆分:
                1. 不拆分多人维护代码, 发版上线很麻烦, 可用性降低.
                2. 拆分多个微服务, 维护开发方便, 提升开发效率. 也提升了系统复杂度
        如何进行系统拆分:
                1. 多轮拆分, 先按照模块拆分: 用户权益系统/定时任务返利模块/领券中心...
                2. 系统内部拆分, 领券中心拆成同步接口&异步消息处理模块...
        拆分后不用dubbo可以吗:
                可以, 把超时重试, 负载均衡...做好.
	为什么用dubbo: dubbo只是一个RPC架构, 还有springcloud.
	为什么不用springCloud:
		1. Spring Cloud来源于Spring，质量、稳定性、持续性都可以得到保证
		2. cloud发展快.
		3. 而且生态化.
	分布式服务框架: 
	分布式服务接口请求顺序性:
		1. hash分发, 把要保证数据的请求分发到同一个provider/队列/线程中.
		2. 分布式事务锁. 拿锁判断, 释放锁. 保证强顺序. 
	分布式服务接口幂等性设计: 不能重复返利:
		不是技术问题, 是经验问题.
		1. 每个请求设置唯一ID. 设置同步锁
		2. 每次请求记录请求标识. mysql记录流水/redis记录领取记录.
		3. 每次请求处理前判断是否已处理.
		4. token机制
		5. 锁.
	分布式会话(session): 分布式session:
		1. tomcat + redis: tomcat的配置文件中配置redisSessionHandler和RedisSessionManager.
			但是严重依赖于tomcat, 重耦合.
		2. springSession + Redis: 通过filter过滤, 设置redis为session.
	分布式事务: 
		BASE:
		CAP: 一致性(Consistency), 可用性(Availability), 区容错性(Partition tolerance)
		XA: 
	分布式事务中间件: 
	分布式事务方案: 必问
		1. 两阶段提交方案: 先询问, 再执行. 常用于多数据库存放数据. 但是一个服务多数据库不合规.
		2. TCC方案(try,confirm,cancel): 支付&发放奖励方案. 正确性. 批量返利.
			try: 这个阶段说的是对各个服务的资源做检测以及对资源进行锁定或者预留
			Confirm：手动在各个服务中执行实际的操作. 如果出错就cancel.
			Cancel：如果任何一个服务的业务方法执行出错，那么这里就需要进行补偿，就是执行已经执行成功的业务逻辑的回滚操作
		3. 本地消息表: 任务制监听Kafka完成任务.
			A与B系统之间通过各自备份消息表+MQ通信, 外加zk等进行成功确认. 完成事务.加上重试
		4. 可靠消息最终一致性: (最靠谱)
		5. 最大努力通知方案: 
			启动事务的服务A, 发送MQ, 最大努力服务开始接收消息, 努力调用B, 多次重试.
		6. 不做分布式事务~~
			多监控, 记录完整日志, 事后快速定位, 修复数据.

	RPC原理: http://www.importnew.com/22003.html
	RPC请求流程.
	RPC框架设计: 
		（1）服务的注册中心, 可以用zookeeper来做
		（2）消费者需要去注册中心拿对应的服务信息吧
		（3）基于动态代理发起一次请求了
		（4）负载均衡算法查找消费者
		（5）数据用netty了，用hessian协议序列化后用nio方式发送？
		（6）服务器需要针对生产者生成一个动态代理，监听网络端口了
		降级,超时.
	分布式锁: https://www.jianshu.com/p/8bddd381de06
		分布式锁是什么: ??
		redis: 
			拿锁: set ex(过期时间) nx(不在时才操作), 拿锁失败后不断地尝试拿锁.
			解锁: lua脚本解自己的锁.
			redlock算法: 获取当前时间戳, 为所有的master上锁, 如果超过一半就上锁成功, 否则失败, 失败后依次为每一个master解锁.
			锁延时:
				Redisson框架的watchDog会每隔10s查看一下是否需要延长.
		zookeeper: 
			拿锁: 注册临时节点, 拿锁失败后就注册监听器.
				也可以用临时顺序节点, 解锁时候把下一个叫醒.
			解锁: 删除临时节点.
	service还没执行完，分布式锁在redis中已经过期:??
	如何设计高并发系统: 
		高并发系统的架构组成: ????
	项目中系统监控怎么做的: ????
	第三方登录: 
		1. 校验appID
		2. 校验userProduct
		3. 回调yes
		4. 带回用户可查看数据	
		
Dubbo:
	Dubbo工作原理: 
		分为十层架构:
			1. service 层，接口层，给服务提供者和消费者来实现的
                        2. config 层，配置层，主要是对 dubbo 进行各种配置的
                        3. proxy 层，服务代理层，无论是 consumer 还是 provider，dubbo 都会给你生成代理，代理之间进行网络通信
                        4. registry 层，服务注册层，负责服务的注册与发现
                        5. cluster 层，集群层，封装多个服务提供者的路由以及负载均衡，将多个实例组合成一个服务
                        6. monitor 层，监控层，对 rpc 接口的调用次数和调用时间进行监控
                        7. protocal 层，远程调用层，封装 rpc 调用
                        8. exchange 层，信息交换层，封装请求响应模式，同步转异步
                        9. transport 层，网络传输层，抽象 mina 和 netty 为统一接口
                        10. serialize 层，数据序列化层
		工作原理:
			1）第一步，provider向注册中心去注册
			2）第二步，consumer从注册中心订阅服务，注册中心会通知consumer注册好的服务
				消费者会将提供者的地址等信息拉取到本地缓存
			3）第三步，consumer调用provider
			4）第四步，consumer和provider都异步的通知监控中心
	通讯协议: ?
		1.dubbo协议: dubbo://192.168.0.2:20188?fsdjfsd
			单一长连接, NIO异步通信(高并发), hessian序列化协议, 
			高并发, 但是传输数据量小, consumer远远大于provider
		2.rmi协议:
			java二进制序列化, 适合生产消费者数量均等, 文件传输.
		3.hession协议:
			走hessian序列化协议，多个短连接，适用于provider比consumer数量还多
		4.http协议： json序列化
		5.webservice协议: Http短连接, 适用系统集成和跨语言调用. soap文本序列化。

	序列化协议:  基于不同的通信协议，支持多种序列化协议。
		Hession:
			原理:
				1. client与server基于http-post方式交互，
				2. 辅助信息，封装在http header, 比如做安全校验token
				3. 交互核心数据通过post的body进行字节流传输: 比如调用的方法和参数列表
			hessian数据结构:
				对象序列化机制有8种原始类型:
					原始二进制数据, boolean, 64-bit date(毫秒值), 64-bit double,
	                                32-bit int, 64-bit long, null, UTF-8编码的string
				3种递归类型: list, map, objectForObjects
				ref: 用来表示对共享对象的引用
		Protocol Buffer:
			Google 出品的轻量高效的结构化数据存储格式, 性能强.
			1. 使用proto编译器, 自动进行序列化和反序列化.
			2. 数据压缩效果好

	通信框架:
		netty: 默认

	负载均衡策略:
		random loadbalance: 默认的随机, 根据权重随机配比.
		roundrobin loadbalance: 轮询. 也可以调整权重
		leastactive loadbalance: 某个机器性能越差，那么接收的请求越少
		consistanthash loadbalance: 一致性hash, 相同参数的请求一定分发到一个provider上去

	集群容错策略:
		failover cluster模式: 默认, 失败自动切换，自动重试其他机器
		failfast cluster模式: 一次调用失败就立即失败，常见于写操作
		failsafe cluster模式: 出现异常时忽略掉，常用于不重要的接口调用，比如记录日志
		failbackc cluster模式: 失败了后台自动记录请求，然后定时重发，比较适合于写消息队列这种
		forking cluster: 并行调用多个provider，只要一个成功就立即返回
		broadcacst cluster: 逐个调用所有的provider

	Dubbo 动态代理策略:???

	服务注册, 消费者发现:???

	SPI思想: 例子:JDBC接口
		ExtensionLoader.getExtension.
		@SPI + @Adapter

	如何进行服务治理, 降级, 失败重试和超时重试: ???
		服务治理:
		服务降级:
			是否自动化可分为：自动开关降级和人工开关降级。
                        功能可分为：读服务降级、写服务降级。
                        处于的系统层次可分为：多级降级。
                服务熔断和降级:
                        相似:
                                目的很一致，都是从可用性可靠性着想
                                最终让用户体验到的是某些功能暂时不可达或不可用
                                粒度一般都是服务级别
                        区别:
                                服务熔断一般是某个服务(下游服务)故障引起, 而服务降级一般是从整体负荷考虑.
                                管理目标的层次不太一样,熔断其实是一个框架级的处理,每个微服务都需要(无层级之分),
                                        而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）



		失败重试:
		超时重试:

	zookeeper宕机与dubbo直连的情况: 
Dispatcher

ZooKeeper:
	zk使用场景: 
		分布式系统之间的协调: 通过监听node感知其他的服务.
		分布式锁: 使用创建node, 和监听事件, 来实现锁.
		元数据/配置管理: node里面可以写入元数据.
		HA高可用性场景: 使用临时节点实现监听服务健康状态. 实现主备切换.
	zk选举:
		角色分类: leader(投票发起和决策), follower(参与投票), observer(不参与投票)

		Zookeeper使用主进程来接收并处理事务请求, 采用ZAB原子广播协议把服务器数据状态变更广播到副本进程.
			原子广播协议, 类似二阶段提交过程,  Leader服务器会为其生成事务Proposal, 将其发送给集群中其余所有的机器, 然后再收集各自的选票进行事务提交
		原子广播由Zab协议实现, 工作模式:
			恢复模式(选主):
			广播模式(同步):
				1. leader等待server连接；
                                2. Follower连接leader，将最大的zxid发送给leader；
                                3. Leader根据follower的zxid确定同步点；
                                4. 完成同步后通知follower 已经成为uptodate状态；
                                5. Follower收到uptodate消息后，又可以重新接受client的请求进行服务了。
		每个server工作中的三种状态:
			LOOKING：当前Server不知道leader是谁，正在搜寻
                        LEADING：当前Server即为选举出来的leader
                        FOLLOWING：leader已经选举出来，当前Server与之同步
		选举算法:
			basic paxos:
			fast paxos: 默认
		选举过程:
			当一台服务器进入Leader 选举流程时, 集群中可能现在本来就有Leader, 那么就被告知当前Leader信息了, 直接就变成Follower
			1. 每个Server发出一个投票 为自己做leader投票
				投票包括[选取leader服务器的myid, leader的ZXID].发给其他所有的zookeeper.
			2. 接收来自各个服务器的投票
				检查投票的有效性, 是否是本轮投票是否是LOOKING状态的服务器.
			3. 处理投票
				zookeeper将收到的投票和自己的投票PK, 把自己的投票更新成更优先的票., 再把投票发出去
				检查ZXID(事务ID), ZXID大的优先, 否则选MYID大的
			4. 统计投票:
				统计是否有过半机器收到相同的投票信息. 过半即选出leader
			5. 改变服务器状态
                              确定了Leader, 所有的服务器更新自己的状态, Follower变更成FOLLWING, Leader变成LEADING.
	脑裂问题: https://mp.weixin.qq.com/s/Lo-xnMGvEemkvCG843d9eg




使用场景及限制: 

为什么要用dubbo- 全用Kafka可以吗


分布式系统原理：CAP，最终一致性，幂等操作等
高并发情况下，我们系统是如何支撑大量的请求的

集群如何同步会话状态

负载均衡的原理

描述分布式事务之TCC服务设计？


分布式锁、以及分布式全局唯一ID的实现比较？


分布式架构在你目前项目中的体现；

Dubbo 和 Spring Cloud 的关系？


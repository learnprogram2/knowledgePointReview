
NIO/IO:
	IO流面试: https://blog.csdn.net/baidu_37107022/article/details/76890019
	TCP/IP模型: 
		应用层: DNS, Ping,
		传输层: TCP, UDP
		网际层: IP
		网络接口层: DataLink
	TCP、UDP 协议的区别: 面向连接/无连接, 
	在浏览器中输入url地址 ->> 显示主页的过程: https://segmentfault.com/a/1190000006879700
	HTTP长连接、短连接: HTTP长连接、短连接究竟是什么？》
	TCP三次握手和四次挥手: https://blog.csdn.net/qzcsu/article/details/72861891
	IP和mac地址区别: https://blog.csdn.net/guoweimelon/article/details/50858597
	Http请求格式: https://blog.csdn.net/a19881029/article/details/14002273
	多路复用的几种方式以及区别: 
		概念: 同时监控多个IO事件，当哪个IO事件准备就绪就执行哪个IO事件
		1.select ----->windows linux unix（苹果内核）: 单个进程能够监视的文件描述符的数量存在最大限制，通常是1024。
			由于select采用轮询的方式扫描文件描述符，文件描述符数量越多，性能越差；
			内核/用户空间内存拷贝，select需要大量的句柄数据结构，产生巨大开销；
			select返回的是含有整个句柄的数组，应用程序需要遍历整个数组才能发现哪些句柄发生事件；
		2.poll ----->linux unix: 使用链表保存文件描述符，没有了文件描述符的限制
		3.epoll ----->linux unix: epoll使用了一个文件描述符管理了多个文件描述符. 线程安全.
	Serialization底层如何实现: ObjectOutputStream.
	TIME_WAIT是什么状态还记得吗,什么情况下网络会出现这个状态:
		四次挥手里, 在主动关闭的一方, 会经历TIME_WAIT状态, 而TIME_WAIT的持续时间是2MSL, 在这期间, 
		系统不会建立与此连接相同的连接(Sip:Sport and Dip:Dport).
		1. 实现可靠的四次挥手断开连接: 假设没有TIME_WAIT状态, client收到对端的FIN分节发送ACK分节之后就变为了CLOSED状态, 
			这个ACK分节可能会丢失, 一旦超时服务器端就会重新发送FIN给client, 但此时的client已经CLOSED, 
			只能回应RST分节, 会造成server的异常关闭
		2. 清除前一个连接的旧报文影响: TIME_WAIT的时间是2MSL, 在这期间是禁止建立相同四元组的连接-设计-思想
	TCP 如何保证传输可靠性?
		1. 应用数据被分割成 TCP 认为最适合发送的数据块。
		2. TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。
		3. 确认响应ACK
		4. 超时重发. 
		5. 接收时对包进行校验： TCP将保持它首部和数据的检验和.
		6. 丢弃重复数据
	Https的原理:????????
	进程与线程的区别是什么: 通讯方式是什么? 
		进程: 进程是表示资源分配的基本单位，又是调度运行的基本单位.
			管道(pipe), 信号(signal), 消息队列(message queue), 信号量(semaphore), 共享内存(shared memory), 套接字(socket)
		线程: 线程是进程中执行运算的最小单位，亦即执行处理机调度的基本单位。
			消息消息队列, 事件, 信号量(semaphore). 等待通知, lock/condition 
	Netty: 

